package com.vibhinna.binoy;

import java.io.File;
import java.io.FileFilter;
import java.io.IOException;

import android.content.ContentValues;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.os.Environment;
import android.provider.BaseColumns;
import android.util.Log;

public class DatabaseUtils {
	private static final String TAG = null;

	public static int[] scanFolder(SQLiteDatabase db) {
		int added = 0, deleted = 0;
		String extState = Environment.getExternalStorageState();
		if (extState.equals(Environment.MEDIA_MOUNTED)) {
			FileFilter filterDirectoriesOnly = new FileFilter() {
				@Override
				public boolean accept(File file) {
					return file.isDirectory();
				}
			};
			Cursor pathcursora = db.query(DataBaseHelper.VFS_DATABASE_TABLE,
					new String[] { DataBaseHelper.VIRTUAL_SYSTEM_COLUMN_PATH,
							BaseColumns._ID }, null, null, null, null, null);
			if (!Constants.MBM_ROOT.exists()) {
				Constants.MBM_ROOT.mkdir();
			}
			if (pathcursora.getCount() > 0) {
				// scan whole db and get path to cursor
				pathcursora.moveToFirst();
				do {
					File cfile = new File(pathcursora.getString(0));
					if (!cfile.exists()) {
						// remove invalid db files
						Log.d(TAG, pathcursora.getString(0)
								+ " does not exist, db entry removed");
						db.delete(DataBaseHelper.VFS_DATABASE_TABLE,
								BaseColumns._ID + " IS ?",
								new String[] { pathcursora.getString(1) });
						deleted = deleted++;
						// writeXML();
					} else
						Log.d(TAG, pathcursora.getString(0) + " is valid, kept");
				} while (pathcursora.moveToNext());
			}
			pathcursora.close();
			File[] sdDirectories = Constants.MBM_ROOT
					.listFiles(filterDirectoriesOnly);
			// get all dirs in /mnt/sdcard/multiboot
			for (int i = 0; i < sdDirectories.length; i++) {
				File file = sdDirectories[i];
				String vspathi = null;
				try {
					vspathi = file.getCanonicalPath();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				String vsname = file.getName();
				Cursor pathcursorb = db
				// compare with db entries
						.rawQuery("SELECT " + BaseColumns._ID + " FROM "
								+ DataBaseHelper.VFS_DATABASE_TABLE + " WHERE "
								+ DataBaseHelper.VIRTUAL_SYSTEM_COLUMN_PATH
								+ "=?", new String[] { vspathi });
				// filter out those with a . as prefix
				if (!vsname.startsWith(".")) {
					// if cursor is empty, the vs is not registerd
					if (pathcursorb.getCount() == 0) {
						ContentValues values = new ContentValues();
						values.put(DataBaseHelper.VIRTUAL_SYSTEM_COLUMN_NAME,
								vsname);
						values.put(DataBaseHelper.VIRTUAL_SYSTEM_COLUMN_PATH,
								file.getPath());
						values.put(
								DataBaseHelper.VIRTUAL_SYSTEM_COLUMN_DESCRIPTION,
								"Autogenerated, please edit!");
						values.put(DataBaseHelper.VIRTUAL_SYSTEM_COLUMN_TYPE,
								"1");
						db.insert(DataBaseHelper.VFS_DATABASE_TABLE, null,
								values);
						added = added++;
					}
				}
				pathcursorb.close();
			}
			return new int[] { added, deleted };
		} else {
			return new int[] { 0, 0 };
		}
	}
}
